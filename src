function[Solution,Error_estimate,Number_of_iterations]=Helmholtz(N,w)

% The constants
n=N;
ax=-pi; ay=-pi; bx=pi; by=pi;
gamma=-pi;
%gamma=0;
% Generating x,y
x=linspace(ax,bx,n); y=linspace(ay,by,n);
% Boundary conditions
phiab=cos(pi*(y-ay)).*cosh(by-y);
psiab=((y-ay).^2).*sin((pi*(y-ay))/(2*(by-ay)));
u(:,1)=phiab; u(:,n)=psiab;% this creates the nxn matrix with the first set of boundary conditions


%% 
F = cos((pi/2)*(2*((x-ax)./(bx-ax))+1)).*sin(pi*((y-ay)./(by-ay)));
F1=F';
h=(bx-ax)/n;

for j=2:n-1
    for i=2:n-1
        F(i,j) = cos((pi/2)*(2*((x(i)-ax)./(bx-ax))+1)).*sin(pi*((y(j)-ay)./(by-ay)));
        %F(i,j)=0;
        u(i,j)= (1/(4-(gamma*h^2)))*((u(i-1,j)+u(i+1,j)+u(i,j-1)+u(i,j+1)));
    end
end
%% 
u(1,:)=u(2,2); u(n,:)=u(n-1,n-1);
U=u;

mesh(U)


S0= eye(n);
S1=diag(ones(n-4,1),4); 
S2=diag(ones(n-5,1),5) ;
S3=diag(ones(n-6,1),6) ;
S4=diag(ones(n-10,1),10);
S=S0+S1+S2+S3+S4;

U_solve=S.*U;
%% 

[Solution,Error_estimate,Number_of_iterations,flag]=SOR_trial1(U_solve,zeros(n,1),F1,w,1e4,0.01);
